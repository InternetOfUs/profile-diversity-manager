image: docker:latest

services:
  - docker:dind

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  
before_script:
  - echo -n $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  - export COMPONENT_VERSION=$(grep 'version' $CI_PROJECT_DIR/app/main.py | head -n1 | awk -F '"' '{ print $2 }' | awk -F '"' '{ print $1 }')


build_docker:
  stage: build
  script:
    - docker pull $CI_REGISTRY_IMAGE:$COMPONENT_VERSION  || true
    - DOCKER_BUILDKIT=1 docker build -f docker/Dockerfile --cache-from $CI_REGISTRY_IMAGE:$COMPONENT_VERSION -t $CI_REGISTRY_IMAGE:$COMPONENT_VERSION .
    - docker push $CI_REGISTRY_IMAGE:$COMPONENT_VERSION

build_docker_dev:
  stage: build
  needs: ["build_docker"]
  dependencies:
    - build_docker
  script:
    - docker pull $CI_REGISTRY_IMAGE:$COMPONENT_VERSION  || true
    - docker pull $CI_REGISTRY_IMAGE:dev  || true
    - DOCKER_BUILDKIT=1 docker build -f docker/dev/Dockerfile --cache-from $CI_REGISTRY_IMAGE:dev -t $CI_REGISTRY_IMAGE:dev .
    - docker push $CI_REGISTRY_IMAGE:dev
    
buil_test_site:
  stage: test
  needs: ["build_docker_dev"]
  dependencies:
    - build_docker_dev
  script:
    - docker pull $CI_REGISTRY_IMAGE:dev || true
    - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v $CI_PROJECT_DIR:/app -v $CI_PROJECT_DIR/.m2/repository:/root/.m2/repository -t $CI_REGISTRY_IMAGE:dev /bin/bash -c "source /root/.bashrc && cd /app/tests && pytest --cov=../app --junitxml=report.xml && coverage xml"
  artifacts:
    when: always
    reports:
      junit: tests/report.xml
      cobertura: tests/coverage.xml